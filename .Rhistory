knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(tidymodels)
library(ISLR)
library(ggplot2)
library(corrplot)
library(yardstick)
tidymodels_prefer()
# Read the full abalone data set into R using read_csv()
abalone <- read.csv(file = 'abalone.csv')
# Read the full abalone data set into R using read_csv()
abalone <- read.csv('abalone.csv')
# Read the full abalone data set into R using read_csv()
abalone <- read.csv('abalone.csv')
knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(tidymodels)
library(ISLR)
library(ggplot2)
library(corrplot)
library(yardstick)
tidymodels_prefer()
# Read the full abalone data set into R using read_csv()
abalone <- read.csv(file = 'abalone.csv')
abalone %>% head()
# create the variable age in the data set
abalone["age"] <- abalone$rings + 1.5
head(abalone)
#the distribution of age
abalone %>%
ggplot(aes(x=age)) +
geom_histogram(bins=30)+
labs(title="Histogram of age (abalone)",
x ="age of abalone", y = "count (the number of abalone)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# set a seed
set.seed(0623)
# split the abalone data into a training set and a testing set.
abalone_split <- initial_split(abalone, prop = 0.80, strata = age)
abalone_train <- training(abalone_split)
abalone_test <- testing(abalone_split)
dim(abalone)
dim(abalone_train)
dim(abalone_test)
# remove variable ring
new_abalone_train <- abalone_train %>% select(-rings)
# confirm remove rings and show the new data set
head(new_abalone_train)
abalone_recipe <- recipe(age ~ ., data = new_abalone_train) %>%
# dummy code any categorical predictors
step_dummy(all_nominal_predictors()) %>%
# create interactions between type and shucked_weight
step_interact(terms = ~type:shucked_weight) %>%
# create interactions between longest_shell and diameter
step_interact(terms = ~longest_shell:diameter) %>%
# create interactions between shucked_weight and shell_weight
step_interact(terms = ~shucked_weight:shell_weight) %>%
# center all predictors
step_center(all_nominal_predictors()) %>%
# scale all predictors
step_scale(all_nominal_predictors())
abalone_recipe
# create and store a linear regression object
# using the "lm" engine.
lm_model <- linear_reg() %>%
set_engine("lm")
lm_wflow <- workflow() %>%       # set up an empty workflow
add_model(lm_model) %>%                # add the model i created in Question 4
add_recipe(abalone_recipe)             # add the recipe that i created in Question 3
lm_fit <- fit(lm_wflow, new_abalone_train)
lm_fit %>%
# This returns the parsnip object:
extract_fit_parsnip() %>%
# Now tidy the linear model object:
tidy()
predict_abalone <- data.frame(type = 'F', longest_shell = 0.50, diameter = 0.10, height = 0.30, whole_weight = 4, shucked_weight = 1, viscera_weight = 2, shell_weight = 1
)
predict_abalone_res <- predict(lm_fit, new_data = predict_abalone)
predict_abalone_res
abalone_train_res <- predict(lm_fit, new_data = new_abalone_train %>% select(-age))
abalone_train_res
abalone_train_res <- bind_cols(abalone_train_res, new_abalone_train %>% select(age))
abalone_train_res
abalone_metrics <- metric_set(rsq, rmse, mae)
abalone_metrics(abalone_train_res, truth = age,
estimate = .pred)
knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'cener',
message = F,
warning = F)
# packages
library(tidyverse)
library(tidymodels)
library(ISLR)
library(ggplot2)
library(corrplot)
library(yardstick)
tidymodels_prefer()
# Read the full abalone data set into R using read_csv()
abalone <- read.csv(file = 'abalone.csv')
abalone %>% head()
# create the variable age in the data set
abalone["age"] <- abalone$rings + 1.5
head(abalone)
#the distribution of age
abalone %>%
ggplot(aes(x=age)) +
geom_histogram(bins=30)+
labs(title="Histogram of age (abalone)",
x ="age of abalone", y = "count (the number of abalones)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# remove variable ring
new_abalone_train <- abalone_train %>% select(-rings)
# confirm remove rings and show the new data set
head(new_abalone_train)
abalone_recipe <- recipe(age ~ ., data = new_abalone_train) %>%
# dummy code any categorical predictors
step_dummy(all_nominal_predictors()) %>%
# create interactions between type and shucked_weight
step_interact(terms = ~type:shucked_weight) %>%
# create interactions between longest_shell and diameter
step_interact(terms = ~longest_shell:diameter) %>%
# create interactions between shucked_weight and shell_weight
step_interact(terms = ~shucked_weight:shell_weight) %>%
# center all predictors
step_center(all_nominal_predictors()) %>%
# scale all predictors
step_scale(all_nominal_predictors())
abalone_recipe
abalone_recipe <- recipe(age ~ ., data = new_abalone_train) %>%
# dummy code any categorical predictors
step_dummy(all_nominal_predictors()) %>%
# create interactions between type and shucked_weight
step_interact(terms = ~type:shucked_weight) %>%
# create interactions between longest_shell and diameter
step_interact(terms = ~longest_shell:diameter) %>%
# create interactions between shucked_weight and shell_weight
step_interact(terms = ~shucked_weight:shell_weight) %>%
# center all predictors
step_center(all_predictors()) %>%
# scale all predictors
step_scale(all_predictors())
abalone_recipe
# create and store a linear regression object
# using the "lm" engine.
lm_model <- linear_reg() %>%
set_engine("lm")
lm_wflow <- workflow() %>%       # set up an empty workflow
add_model(lm_model) %>%                # add the model i created in Question 4
add_recipe(abalone_recipe)             # add the recipe that i created in Question 3
predict_abalone <- data.frame(type = 'F', longest_shell = 0.50, diameter = 0.10, height = 0.30, whole_weight = 4, shucked_weight = 1, viscera_weight = 2, shell_weight = 1)
predict_abalone_res <- predict(lm_fit, new_data = predict_abalone)
predict_abalone_res
abalone_train_res <- bind_cols(abalone_train_res, new_abalone_train %>% select(age))
abalone_train_res
abalone_train_res <- predict(lm_fit, new_data = new_abalone_train %>% select(-age))
abalone_train_res
abalone_train_res <- bind_cols(abalone_train_res, new_abalone_train %>% select(age))
abalone_train_res
abalone_metrics <- metric_set(rsq, rmse, mae)
abalone_metrics(abalone_train_res, truth = age,
estimate = .pred)
abalone_recipe <- recipe(age ~ ., data = new_abalone_train) %>%
# dummy code any categorical predictors
step_dummy(all_nominal_predictors()) %>%
# create interactions between type and shucked_weight
step_interact(terms = ~starts_with("type"):shucked_weight) %>%
# create interactions between longest_shell and diameter
step_interact(terms = ~longest_shell:diameter) %>%
# create interactions between shucked_weight and shell_weight
step_interact(terms = ~shucked_weight:shell_weight) %>%
# center all predictors
step_center(all_predictors()) %>%
# scale all predictors
step_scale(all_predictors())
abalone_recipe
knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(tidymodels)
library(ISLR)
library(ggplot2)
library(corrplot)
library(yardstick)
tidymodels_prefer()
# Read the full abalone data set into R using read_csv()
abalone <- read.csv(file = 'abalone.csv')
abalone %>% head()
# create the variable age in the data set
abalone["age"] <- abalone$rings + 1.5
head(abalone)
#the distribution of age
abalone %>%
ggplot(aes(x=age)) +
geom_histogram(bins=30)+
labs(title="Histogram of age (abalone)",
x ="age of abalone", y = "count (the number of abalones)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
# set a seed
set.seed(0623)
# split the abalone data into a training set and a testing set.
abalone_split <- initial_split(abalone, prop = 0.80, strata = age)
abalone_train <- training(abalone_split)
abalone_test <- testing(abalone_split)
dim(abalone)
dim(abalone_train)
dim(abalone_test)
# remove variable ring
new_abalone_train <- abalone_train %>% select(-rings)
# confirm remove rings and show the new data set
head(new_abalone_train)
abalone_recipe <- recipe(age ~ ., data = new_abalone_train) %>%
# dummy code any categorical predictors
step_dummy(all_nominal_predictors()) %>%
# create interactions between type and shucked_weight
step_interact(terms = ~starts_with("type"):shucked_weight) %>%
# create interactions between longest_shell and diameter
step_interact(terms = ~longest_shell:diameter) %>%
# create interactions between shucked_weight and shell_weight
step_interact(terms = ~shucked_weight:shell_weight) %>%
# center all predictors
step_center(all_predictors()) %>%
# scale all predictors
step_scale(all_predictors())
abalone_recipe
# create and store a linear regression object
# using the "lm" engine.
lm_model <- linear_reg() %>%
set_engine("lm")
lm_wflow <- workflow() %>%       # set up an empty workflow
add_model(lm_model) %>%                # add the model i created in Question 4
add_recipe(abalone_recipe)             # add the recipe that i created in Question 3
lm_fit <- fit(lm_wflow, new_abalone_train)
lm_fit %>%
# This returns the parsnip object:
extract_fit_parsnip() %>%
# Now tidy the linear model object:
tidy()
predict_abalone <- data.frame(type = 'F', longest_shell = 0.50, diameter = 0.10, height = 0.30, whole_weight = 4, shucked_weight = 1, viscera_weight = 2, shell_weight = 1)
predict_abalone_res <- predict(lm_fit, new_data = predict_abalone)
predict_abalone_res
# Use predict() to create a tibble of my model’s predicted values from the training data along with the actual observed ages
abalone_train_res <- predict(lm_fit, new_data = new_abalone_train %>% select(-age))
abalone_train_res
# Use bind_cols() to create a tibble of my model’s predicted values from the training data along with the actual observed ages
abalone_train_res <- bind_cols(abalone_train_res, new_abalone_train %>% select(age))
abalone_train_res
# create a metric set that includes R2, RMSE (root mean squared error), and MAE (mean absolute error)
abalone_metrics <- metric_set(rsq, rmse, mae)
# apply my metric set to the tibble
abalone_metrics(abalone_train_res, truth = age,
estimate = .pred)
